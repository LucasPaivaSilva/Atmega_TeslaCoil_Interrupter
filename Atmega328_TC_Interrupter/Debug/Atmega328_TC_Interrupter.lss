
Atmega328_TC_Interrupter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000003da  0000046e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800150  00800150  000004be  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000530  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011ec  00000000  00000000  000005b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008ca  00000000  00000000  0000179c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000727  00000000  00000000  00002066  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000108  00000000  00000000  00002790  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004c6  00000000  00000000  00002898  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a36  00000000  00000000  00002d5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  00003794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 95 01 	jmp	0x32a	; 0x32a <__vector_3>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ed       	ldi	r30, 0xDA	; 218
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 35       	cpi	r26, 0x50	; 80
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e5       	ldi	r26, 0x50	; 80
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 35       	cpi	r26, 0x56	; 86
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 c8 01 	call	0x390	; 0x390 <main>
  9e:	0c 94 eb 01 	jmp	0x3d6	; 0x3d6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <cmd_LCD>:
//---------------------------------------------------------------------------------------------
// Sub-rotina para enviar caracteres e comandos ao LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void cmd_LCD(unsigned char c, char cd)				//c é o dado  e cd indica se é instrução ou caractere
{
	if(cd==0)
  a6:	61 11       	cpse	r22, r1
  a8:	02 c0       	rjmp	.+4      	; 0xae <cmd_LCD+0x8>
		clr_bit(CONTR_LCD,RS);
  aa:	5a 98       	cbi	0x0b, 2	; 11
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <cmd_LCD+0xa>
	else
		set_bit(CONTR_LCD,RS);
  ae:	5a 9a       	sbi	0x0b, 2	; 11

	//primeiro nibble de dados - 4 MSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F)|(0xF0 & c);		
  b0:	9b b1       	in	r25, 0x0b	; 11
  b2:	9f 70       	andi	r25, 0x0F	; 15
  b4:	28 2f       	mov	r18, r24
  b6:	20 7f       	andi	r18, 0xF0	; 240
  b8:	92 2b       	or	r25, r18
  ba:	9b b9       	out	0x0b, r25	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	45 e0       	ldi	r20, 0x05	; 5
  be:	4a 95       	dec	r20
  c0:	f1 f7       	brne	.-4      	; 0xbe <cmd_LCD+0x18>
  c2:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0)|(c>>4);	
	#endif
	
	pulso_enable();
  c4:	5b 9a       	sbi	0x0b, 3	; 11
  c6:	95 e0       	ldi	r25, 0x05	; 5
  c8:	9a 95       	dec	r25
  ca:	f1 f7       	brne	.-4      	; 0xc8 <cmd_LCD+0x22>
  cc:	00 00       	nop
  ce:	5b 98       	cbi	0x0b, 3	; 11
  d0:	40 ef       	ldi	r20, 0xF0	; 240
  d2:	4a 95       	dec	r20
  d4:	f1 f7       	brne	.-4      	; 0xd2 <cmd_LCD+0x2c>

	//segundo nibble de dados - 4 LSB
	#if (nibble_dados)								//compila código para os pinos de dados do LCD nos 4 MSB do PORT
		DADOS_LCD = (DADOS_LCD & 0x0F) | (0xF0 & (c<<4));		
  d6:	2b b1       	in	r18, 0x0b	; 11
  d8:	92 2f       	mov	r25, r18
  da:	9f 70       	andi	r25, 0x0F	; 15
  dc:	40 e1       	ldi	r20, 0x10	; 16
  de:	84 9f       	mul	r24, r20
  e0:	90 01       	movw	r18, r0
  e2:	11 24       	eor	r1, r1
  e4:	29 2b       	or	r18, r25
  e6:	2b b9       	out	0x0b, r18	; 11
  e8:	95 e0       	ldi	r25, 0x05	; 5
  ea:	9a 95       	dec	r25
  ec:	f1 f7       	brne	.-4      	; 0xea <cmd_LCD+0x44>
  ee:	00 00       	nop
	#else											//compila código para os pinos de dados do LCD nos 4 LSB do PORT
		DADOS_LCD = (DADOS_LCD & 0xF0) | (0x0F & c);
	#endif
	
	pulso_enable();
  f0:	5b 9a       	sbi	0x0b, 3	; 11
  f2:	45 e0       	ldi	r20, 0x05	; 5
  f4:	4a 95       	dec	r20
  f6:	f1 f7       	brne	.-4      	; 0xf4 <cmd_LCD+0x4e>
  f8:	00 00       	nop
  fa:	5b 98       	cbi	0x0b, 3	; 11
  fc:	90 ef       	ldi	r25, 0xF0	; 240
  fe:	9a 95       	dec	r25
 100:	f1 f7       	brne	.-4      	; 0xfe <cmd_LCD+0x58>
	
	if((cd==0) && (c<4))				//se for instrução de retorno ou limpeza espera LCD estar pronto
 102:	61 11       	cpse	r22, r1
 104:	08 c0       	rjmp	.+16     	; 0x116 <cmd_LCD+0x70>
 106:	84 30       	cpi	r24, 0x04	; 4
 108:	30 f4       	brcc	.+12     	; 0x116 <cmd_LCD+0x70>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10a:	8f e3       	ldi	r24, 0x3F	; 63
 10c:	9f e1       	ldi	r25, 0x1F	; 31
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	f1 f7       	brne	.-4      	; 0x10e <cmd_LCD+0x68>
 112:	00 c0       	rjmp	.+0      	; 0x114 <cmd_LCD+0x6e>
 114:	00 00       	nop
 116:	08 95       	ret

00000118 <inic_LCD_4bits>:
//Sub-rotina para inicialização do LCD com via de dados de 4 bits
//---------------------------------------------------------------------------------------------
void inic_LCD_4bits()		//sequência ditada pelo fabricando do circuito integrado HD44780
{							//o LCD será só escrito. Então, R/W é sempre zero.

	clr_bit(CONTR_LCD,RS);	//RS em zero indicando que o dado para o LCD será uma instrução	
 118:	5a 98       	cbi	0x0b, 2	; 11
	clr_bit(CONTR_LCD,E);	//pino de habilitação em zero
 11a:	5b 98       	cbi	0x0b, 3	; 11
 11c:	2f ef       	ldi	r18, 0xFF	; 255
 11e:	89 ef       	ldi	r24, 0xF9	; 249
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	21 50       	subi	r18, 0x01	; 1
 124:	80 40       	sbci	r24, 0x00	; 0
 126:	90 40       	sbci	r25, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <inic_LCD_4bits+0xa>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <inic_LCD_4bits+0x14>
 12c:	00 00       	nop
	
	_delay_ms(20);	 		//tempo para estabilizar a tensão do LCD, após VCC ultrapassar 4.5 V (na prática pode
							//ser maior). 
	//interface de 8 bits						
	#if (nibble_dados)
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x30;		
 12e:	8b b1       	in	r24, 0x0b	; 11
 130:	8f 70       	andi	r24, 0x0F	; 15
 132:	80 63       	ori	r24, 0x30	; 48
 134:	8b b9       	out	0x0b, r24	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 136:	25 e0       	ldi	r18, 0x05	; 5
 138:	2a 95       	dec	r18
 13a:	f1 f7       	brne	.-4      	; 0x138 <inic_LCD_4bits+0x20>
 13c:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x03;		
	#endif						
							
	pulso_enable();			//habilitação respeitando os tempos de resposta do LCD
 13e:	5b 9a       	sbi	0x0b, 3	; 11
 140:	85 e0       	ldi	r24, 0x05	; 5
 142:	8a 95       	dec	r24
 144:	f1 f7       	brne	.-4      	; 0x142 <inic_LCD_4bits+0x2a>
 146:	00 00       	nop
 148:	5b 98       	cbi	0x0b, 3	; 11
 14a:	90 ef       	ldi	r25, 0xF0	; 240
 14c:	9a 95       	dec	r25
 14e:	f1 f7       	brne	.-4      	; 0x14c <inic_LCD_4bits+0x34>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 150:	8f e1       	ldi	r24, 0x1F	; 31
 152:	9e e4       	ldi	r25, 0x4E	; 78
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <inic_LCD_4bits+0x3c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <inic_LCD_4bits+0x42>
 15a:	00 00       	nop
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15c:	95 e0       	ldi	r25, 0x05	; 5
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <inic_LCD_4bits+0x46>
 162:	00 00       	nop
	_delay_ms(5);		
	pulso_enable();
 164:	5b 9a       	sbi	0x0b, 3	; 11
 166:	25 e0       	ldi	r18, 0x05	; 5
 168:	2a 95       	dec	r18
 16a:	f1 f7       	brne	.-4      	; 0x168 <inic_LCD_4bits+0x50>
 16c:	00 00       	nop
 16e:	5b 98       	cbi	0x0b, 3	; 11
 170:	80 ef       	ldi	r24, 0xF0	; 240
 172:	8a 95       	dec	r24
 174:	f1 f7       	brne	.-4      	; 0x172 <inic_LCD_4bits+0x5a>
 176:	8f e1       	ldi	r24, 0x1F	; 31
 178:	93 e0       	ldi	r25, 0x03	; 3
 17a:	01 97       	sbiw	r24, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <inic_LCD_4bits+0x62>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <inic_LCD_4bits+0x68>
 180:	00 00       	nop
 182:	95 e0       	ldi	r25, 0x05	; 5
 184:	9a 95       	dec	r25
 186:	f1 f7       	brne	.-4      	; 0x184 <inic_LCD_4bits+0x6c>
 188:	00 00       	nop
	_delay_us(200);
	pulso_enable();	/*até aqui ainda é uma interface de 8 bits.
 18a:	5b 9a       	sbi	0x0b, 3	; 11
 18c:	25 e0       	ldi	r18, 0x05	; 5
 18e:	2a 95       	dec	r18
 190:	f1 f7       	brne	.-4      	; 0x18e <inic_LCD_4bits+0x76>
 192:	00 00       	nop
 194:	5b 98       	cbi	0x0b, 3	; 11
 196:	80 ef       	ldi	r24, 0xF0	; 240
 198:	8a 95       	dec	r24
 19a:	f1 f7       	brne	.-4      	; 0x198 <inic_LCD_4bits+0x80>
					estabilização da tensão (geralmente funciona). Se o LCD não for inicializado primeiro no 
					modo de 8 bits, haverá problemas se o microcontrolador for inicializado e o display já o tiver sido.*/
	
	//interface de 4 bits, deve ser enviado duas vezes (a outra está abaixo)
	#if (nibble_dados) 
		DADOS_LCD = (DADOS_LCD & 0x0F) | 0x20;		
 19c:	8b b1       	in	r24, 0x0b	; 11
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	80 62       	ori	r24, 0x20	; 32
 1a2:	8b b9       	out	0x0b, r24	; 11
 1a4:	95 e0       	ldi	r25, 0x05	; 5
 1a6:	9a 95       	dec	r25
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <inic_LCD_4bits+0x8e>
 1aa:	00 00       	nop
	#else		
		DADOS_LCD = (DADOS_LCD & 0xF0) | 0x02;
	#endif
	
	pulso_enable();		
 1ac:	5b 9a       	sbi	0x0b, 3	; 11
 1ae:	25 e0       	ldi	r18, 0x05	; 5
 1b0:	2a 95       	dec	r18
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <inic_LCD_4bits+0x98>
 1b4:	00 00       	nop
 1b6:	5b 98       	cbi	0x0b, 3	; 11
 1b8:	80 ef       	ldi	r24, 0xF0	; 240
 1ba:	8a 95       	dec	r24
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <inic_LCD_4bits+0xa2>
   	cmd_LCD(0x28,0); 		//interface de 4 bits 2 linhas (aqui se habilita as 2 linhas) 
 1be:	60 e0       	ldi	r22, 0x00	; 0
 1c0:	88 e2       	ldi	r24, 0x28	; 40
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
							//são enviados os 2 nibbles (0x2 e 0x8)
   	cmd_LCD(0x08,0);		//desliga o display
 1c6:	60 e0       	ldi	r22, 0x00	; 0
 1c8:	88 e0       	ldi	r24, 0x08	; 8
 1ca:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x01,0);		//limpa todo o display
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x0C,0);		//mensagem aparente cursor inativo não piscando   
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	8c e0       	ldi	r24, 0x0C	; 12
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
   	cmd_LCD(0x80,0);		//inicializa cursor na primeira posição a esquerda - 1a linha
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	80 e8       	ldi	r24, 0x80	; 128
 1e2:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 1e6:	08 95       	ret

000001e8 <escreve_LCD>:
}
//---------------------------------------------------------------------------------------------
//Sub-rotina de escrita no LCD -  dados armazenados na RAM
//---------------------------------------------------------------------------------------------
void escreve_LCD(char *c)
{
 1e8:	cf 93       	push	r28
 1ea:	df 93       	push	r29
 1ec:	ec 01       	movw	r28, r24
   for (; *c!=0;c++) cmd_LCD(*c,1);
 1ee:	88 81       	ld	r24, Y
 1f0:	88 23       	and	r24, r24
 1f2:	39 f0       	breq	.+14     	; 0x202 <escreve_LCD+0x1a>
 1f4:	21 96       	adiw	r28, 0x01	; 1
 1f6:	61 e0       	ldi	r22, 0x01	; 1
 1f8:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 1fc:	89 91       	ld	r24, Y+
 1fe:	81 11       	cpse	r24, r1
 200:	fa cf       	rjmp	.-12     	; 0x1f6 <escreve_LCD+0xe>
}
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <RefreshDisplay>:
						    0x20, 'N', 'o', 'n', 'e', 0x20, 0x20, 0x20, 's' , 'e' , 't', 't', 'i', 'n', 'g', 's'};
unsigned char MenuSelectionBar[] = {0, 7, 16, 23};
int MenuSelectionPosition = -1;
	
void RefreshDisplay()
{
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	int x;
	cmd_LCD(1, 0);
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	81 e0       	ldi	r24, 0x01	; 1
 214:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(0x80, 0);
 218:	60 e0       	ldi	r22, 0x00	; 0
 21a:	80 e8       	ldi	r24, 0x80	; 128
 21c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 220:	06 e0       	ldi	r16, 0x06	; 6
 222:	11 e0       	ldi	r17, 0x01	; 1
 224:	c6 e1       	ldi	r28, 0x16	; 22
 226:	d1 e0       	ldi	r29, 0x01	; 1
	for (x=0; x<16;x++)
	{
		cmd_LCD(MenuChar[x], 1);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	f8 01       	movw	r30, r16
 22c:	81 91       	ld	r24, Z+
 22e:	8f 01       	movw	r16, r30
 230:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
void RefreshDisplay()
{
	int x;
	cmd_LCD(1, 0);
	cmd_LCD(0x80, 0);
	for (x=0; x<16;x++)
 234:	0c 17       	cp	r16, r28
 236:	1d 07       	cpc	r17, r29
 238:	b9 f7       	brne	.-18     	; 0x228 <RefreshDisplay+0x20>
	{
		cmd_LCD(MenuChar[x], 1);
	}
	cmd_LCD(0xC0, 0);
 23a:	60 e0       	ldi	r22, 0x00	; 0
 23c:	80 ec       	ldi	r24, 0xC0	; 192
 23e:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 242:	06 e2       	ldi	r16, 0x26	; 38
 244:	11 e0       	ldi	r17, 0x01	; 1
	for (x=16; x<32;x++)
	{
		cmd_LCD(MenuChar[x], 1);
 246:	61 e0       	ldi	r22, 0x01	; 1
 248:	89 91       	ld	r24, Y+
 24a:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	for (x=0; x<16;x++)
	{
		cmd_LCD(MenuChar[x], 1);
	}
	cmd_LCD(0xC0, 0);
	for (x=16; x<32;x++)
 24e:	c0 17       	cp	r28, r16
 250:	d1 07       	cpc	r29, r17
 252:	c9 f7       	brne	.-14     	; 0x246 <RefreshDisplay+0x3e>
	{
		cmd_LCD(MenuChar[x], 1);
	}
}	
 254:	df 91       	pop	r29
 256:	cf 91       	pop	r28
 258:	1f 91       	pop	r17
 25a:	0f 91       	pop	r16
 25c:	08 95       	ret

0000025e <InitMessage>:

void InitMessage()
{
	cmd_LCD(0x80, 0);
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	80 e8       	ldi	r24, 0x80	; 128
 262:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	escreve_LCD("Paiva's TC");
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	91 e0       	ldi	r25, 0x01	; 1
 26a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <escreve_LCD>
	cmd_LCD(0xC0, 0);
 26e:	60 e0       	ldi	r22, 0x00	; 0
 270:	80 ec       	ldi	r24, 0xC0	; 192
 272:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	escreve_LCD("328P Interrupter");
 276:	83 e3       	ldi	r24, 0x33	; 51
 278:	91 e0       	ldi	r25, 0x01	; 1
 27a:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <escreve_LCD>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	2f ef       	ldi	r18, 0xFF	; 255
 280:	8b e7       	ldi	r24, 0x7B	; 123
 282:	92 e9       	ldi	r25, 0x92	; 146
 284:	21 50       	subi	r18, 0x01	; 1
 286:	80 40       	sbci	r24, 0x00	; 0
 288:	90 40       	sbci	r25, 0x00	; 0
 28a:	e1 f7       	brne	.-8      	; 0x284 <InitMessage+0x26>
 28c:	00 c0       	rjmp	.+0      	; 0x28e <InitMessage+0x30>
 28e:	00 00       	nop
	_delay_ms(3000);
	cmd_LCD(1, 0);
 290:	60 e0       	ldi	r22, 0x00	; 0
 292:	81 e0       	ldi	r24, 0x01	; 1
 294:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	cmd_LCD(0x80, 0);
 298:	60 e0       	ldi	r22, 0x00	; 0
 29a:	80 e8       	ldi	r24, 0x80	; 128
 29c:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
	escreve_LCD("Version 0.1");
 2a0:	84 e4       	ldi	r24, 0x44	; 68
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <escreve_LCD>
 2a8:	2f ef       	ldi	r18, 0xFF	; 255
 2aa:	83 ed       	ldi	r24, 0xD3	; 211
 2ac:	90 e3       	ldi	r25, 0x30	; 48
 2ae:	21 50       	subi	r18, 0x01	; 1
 2b0:	80 40       	sbci	r24, 0x00	; 0
 2b2:	90 40       	sbci	r25, 0x00	; 0
 2b4:	e1 f7       	brne	.-8      	; 0x2ae <InitMessage+0x50>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <InitMessage+0x5a>
 2b8:	00 00       	nop
	_delay_ms(1000);
	cmd_LCD(1, 0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	81 e0       	ldi	r24, 0x01	; 1
 2be:	0e 94 53 00 	call	0xa6	; 0xa6 <cmd_LCD>
 2c2:	08 95       	ret

000002c4 <ModifyDisplay>:
};

void ModifyDisplay()
{
	if (PB4Flag == 1)
 2c4:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <PB4Flag>
 2c8:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <PB4Flag+0x1>
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	61 f5       	brne	.+88     	; 0x328 <ModifyDisplay+0x64>
	{
		MenuChar[MenuSelectionBar[MenuSelectionPosition]] = 0x20;
 2d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <MenuSelectionPosition>
 2d4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <MenuSelectionPosition+0x1>
 2d8:	fc 01       	movw	r30, r24
 2da:	ee 5f       	subi	r30, 0xFE	; 254
 2dc:	fe 4f       	sbci	r31, 0xFE	; 254
 2de:	e0 81       	ld	r30, Z
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	ea 5f       	subi	r30, 0xFA	; 250
 2e4:	fe 4f       	sbci	r31, 0xFE	; 254
 2e6:	20 e2       	ldi	r18, 0x20	; 32
 2e8:	20 83       	st	Z, r18
		MenuSelectionPosition++;
 2ea:	01 96       	adiw	r24, 0x01	; 1
		if (MenuSelectionPosition == 4){MenuSelectionPosition = 0;}
 2ec:	84 30       	cpi	r24, 0x04	; 4
 2ee:	91 05       	cpc	r25, r1
 2f0:	29 f0       	breq	.+10     	; 0x2fc <ModifyDisplay+0x38>
void ModifyDisplay()
{
	if (PB4Flag == 1)
	{
		MenuChar[MenuSelectionBar[MenuSelectionPosition]] = 0x20;
		MenuSelectionPosition++;
 2f2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <MenuSelectionPosition+0x1>
 2f6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <MenuSelectionPosition>
 2fa:	04 c0       	rjmp	.+8      	; 0x304 <ModifyDisplay+0x40>
		if (MenuSelectionPosition == 4){MenuSelectionPosition = 0;}
 2fc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <MenuSelectionPosition+0x1>
 300:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <MenuSelectionPosition>
		MenuChar[MenuSelectionBar[MenuSelectionPosition]] = '>';
 304:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <MenuSelectionPosition>
 308:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <MenuSelectionPosition+0x1>
 30c:	ee 5f       	subi	r30, 0xFE	; 254
 30e:	fe 4f       	sbci	r31, 0xFE	; 254
 310:	e0 81       	ld	r30, Z
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	ea 5f       	subi	r30, 0xFA	; 250
 316:	fe 4f       	sbci	r31, 0xFE	; 254
 318:	8e e3       	ldi	r24, 0x3E	; 62
 31a:	80 83       	st	Z, r24
		PB4Flag = 0;
 31c:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <PB4Flag+0x1>
 320:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <PB4Flag>
		RefreshDisplay();
 324:	0e 94 04 01 	call	0x208	; 0x208 <RefreshDisplay>
 328:	08 95       	ret

0000032a <__vector_3>:
		
	}
}

ISR(PCINT0_vect) //interrupção do TC1
{
 32a:	1f 92       	push	r1
 32c:	0f 92       	push	r0
 32e:	0f b6       	in	r0, 0x3f	; 63
 330:	0f 92       	push	r0
 332:	11 24       	eor	r1, r1
 334:	8f 93       	push	r24
 336:	9f 93       	push	r25
	if ((!tst_bit(PINB, PB4))&&(debouncePB4==0))
 338:	1c 99       	sbic	0x03, 4	; 3
 33a:	11 c0       	rjmp	.+34     	; 0x35e <__vector_3+0x34>
 33c:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <debouncePB4>
 340:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <debouncePB4+0x1>
 344:	89 2b       	or	r24, r25
 346:	59 f4       	brne	.+22     	; 0x35e <__vector_3+0x34>
	{
		PB4Flag = 1;
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <PB4Flag+0x1>
 350:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <PB4Flag>
		debouncePB4 = 1;
 354:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <debouncePB4+0x1>
 358:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <debouncePB4>
 35c:	12 c0       	rjmp	.+36     	; 0x382 <__vector_3+0x58>
	}
	else if ((!tst_bit(PINB, PB5))&&(debouncePB5==0))
 35e:	1d 99       	sbic	0x03, 5	; 3
 360:	10 c0       	rjmp	.+32     	; 0x382 <__vector_3+0x58>
 362:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <debouncePB5>
 366:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <debouncePB5+0x1>
 36a:	89 2b       	or	r24, r25
 36c:	51 f4       	brne	.+20     	; 0x382 <__vector_3+0x58>
	{
		PB5Flag = 1;
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	90 e0       	ldi	r25, 0x00	; 0
 372:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <__data_end+0x1>
 376:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <__data_end>
		debouncePB5 = 1;
 37a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <debouncePB5+0x1>
 37e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <debouncePB5>
	}
}
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	0f 90       	pop	r0
 388:	0f be       	out	0x3f, r0	; 63
 38a:	0f 90       	pop	r0
 38c:	1f 90       	pop	r1
 38e:	18 95       	reti

00000390 <main>:


int main(void)
{
    
	DDRD = 0xFF; 
 390:	8f ef       	ldi	r24, 0xFF	; 255
 392:	8a b9       	out	0x0a, r24	; 10
	DDRB  = 0x00;	
 394:	14 b8       	out	0x04, r1	; 4
	PORTB = 0xFF;
 396:	85 b9       	out	0x05, r24	; 5
	
	//interrupção dos bots
	PCICR = 1<<PCIE0;
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
	PCMSK0 = (1<<PCINT4) | (1<<PCINT5);
 39e:	80 e3       	ldi	r24, 0x30	; 48
 3a0:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7e006b>
	sei();
 3a4:	78 94       	sei
	
	inic_LCD_4bits();
 3a6:	0e 94 8c 00 	call	0x118	; 0x118 <inic_LCD_4bits>
	InitMessage();
 3aa:	0e 94 2f 01 	call	0x25e	; 0x25e <InitMessage>
	ModifyDisplay();
 3ae:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ModifyDisplay>
	RefreshDisplay();
 3b2:	0e 94 04 01 	call	0x208	; 0x208 <RefreshDisplay>
	
    while (1) 
    {
		ModifyDisplay();
 3b6:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ModifyDisplay>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	89 e6       	ldi	r24, 0x69	; 105
 3be:	98 e1       	ldi	r25, 0x18	; 24
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <main+0x30>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <main+0x3a>
 3ca:	00 00       	nop
		_delay_ms(500);
		debouncePB4 = 0;
 3cc:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <debouncePB4+0x1>
 3d0:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <debouncePB4>
 3d4:	f0 cf       	rjmp	.-32     	; 0x3b6 <main+0x26>

000003d6 <_exit>:
 3d6:	f8 94       	cli

000003d8 <__stop_program>:
 3d8:	ff cf       	rjmp	.-2      	; 0x3d8 <__stop_program>
